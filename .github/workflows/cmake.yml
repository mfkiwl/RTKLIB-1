name: cmake

on:
  push:
    branches:
    - dev
    paths-ignore:
    - '**.md'

  pull_request:
    types:
    - opened
    - synchronize
    - reopened
    paths-ignore:
    - '**.md'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11.0]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Dependencies (Linux)
      run: sudo apt update && sudo apt -y install qt5-default libqt5serialport5 libqt5serialport5-dev qtbase5-dev
      if: matrix.os == 'ubuntu-20.04'

    - name: Install Dependencies (MacOS)
      run: brew install qt5
      if: matrix.os == 'macos-11.0'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake (Linux)
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build direc tories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=gcc-10 -DCMAKE_Fortran_COMPILER=gfortran-10 -DBUILD_QT_APPS=1 -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: matrix.os == 'ubuntu-20.04'

    - name: Configure CMake (MacOS)
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build direc tories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      #env:
      #  DQt5_DIR: /usr/local/opt/qt/lib/cmake/Qt5/Qt5Config.cmake
      run: cmake $GITHUB_WORKSPACE -DCMAKE_PREFIX_PATH=/usr/local/opt/qt -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=gcc-10 -DCMAKE_Fortran_COMPILER=gfortran-10 -DBUILD_QT_APPS=1 -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: matrix.os == 'macos-11.0'

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --parallel $(nproc) --config $BUILD_TYPE

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --install . --prefix ${{runner.workspace}}/build/install --config $BUILD_TYPE

    - name: Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: make package

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: rtklib-${{ matrix.os }}
        path: ${{runner.workspace}}/build/*.bz2
        if-no-files-found: error
